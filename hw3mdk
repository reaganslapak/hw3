Title         : Homework 3
Author        : Reagan Slapak
Email         : rslapak@umail.iu.edu


~ MathDefs
\newcommand{\jacobi}[2]{\ensuremath{\left(\frac{#1}{#2}\right)}}
~


[TITLE]

# Define the following library functions using recursion:
a. Produce a list with n identical elements:
``` haskell
  replicate :: Int -> a -> [a]
  replicate n x = undefined
```
replicate n x = take n (repeat x)

  replicate 9 5 = [5,5,5,5,5,5,5,5,5]
  
  replicate 3 "element" = ["element","element","element"]

- Select the nth element of a list:
``` haskell
(!!) :: [a] -> Int -> a
xs !! i = undefined
```
[1,2,3] !! 0 = 1

  [6,5,4,3] !! 2 = 4

  "Hello" !! 1 = e

- Decide if a value is an element of a list:
``` haskell
elem :: Eq a => a -> [a] -> Bool
```
elem 1 [1,2,3,4,5] = True

    elem 14 [1,2,3,4,5,6,7,8,9,10] = False

    elem 'o' "Informatics" = True

# Merge and Sort
a. Define a recursive function
``` haskell
merge :: Ord a => [a] -> [a] -> [a]
```
that merges two sorted lists of values to give a single sorted list.  For example:
``` {padding-left:1ex; padding-right:1ex; padding-top:.75ex; padding-bottom:.25ex; background-color:black; color:white; font-size:14pt }
Prelude λ> merge [2,5,6] [1,3,4]
[1,2,3,4,5,6]
```
merge :: Ord a => [a] -> [a] -> [a]

  merge [] xs = xs
  
merge xs [] = xs
  
merge (x:xs) (y:ys) | x <= y   = x : y : merge xs ys

                          |otherwise = y : x : merge xs ys
merge [2,4,5,8],[1,3,6,7] = [1,2,3,4,5,6,7,8]

b. Define a recursive function
``` haskell
  msort :: Ord a => [a] -> [a]
```
that implements merge sort, which can be specified by the following two rules:
  * Lists of length  1 are already sorted;
  * Other lists can be sorted by sorting the two halves and merging the resulting lists. 
\

halve xs = (take ((length xs) `div` 2) xs, drop ((length xs) `div` 2) xs)

msort [] = []

msort [x] = [x]

msort xs = merge (msort (fst (halve xs))) (msort (snd (halve xs)))

mergesort [7,4,5,2,8,1,10,3,6,9] = [1,2,3,4,5,6,7,8,9,10]

# Higher-order functions
a. Express the comprehension 
``` haskell 
  [f x | x  xs, p x] 
``` 
using the functions `map` and `filter`.

  map f [] = []

  map f (x:xs) = f x : map f xs

  filter p [] = []

  filter p (x:xs) | p x = x : filter p xs | otherwise = filter p xs

* Redefine `map f` and `filter p` using `foldr`. (Hint: What is the type of `map f`? And how about the type of `filter p`?)

  map f [] = []
  
  map f (x:xs) = foldr (\x xs -> (f x):xs) [] xs
    
  
   filter p (x:xs) = foldr (\x xs -> if p x then x:xs else xs) [] xs


# Number representations and Arithmetics

a. Convert (8729)~12~ into its octet (base-8) representation.

  35021~8~

*  Write a haskell function that converts any base-8 (_octet_) number into its base-6 (_senary_) form.
``` haskell
  octet2senary :: [Int] -> [Int]
  octet2senary xs = undefined
```
octet2senary [] = []
  
  octet2senary xs [] = xs
    


For example, to obtain the senary representation of (345)~8~, you can call
``` {padding-left:1ex; padding-right:1ex; padding-top:.75ex; padding-bottom:.25ex; background-color:black; color:white; font-size:14pt }
Prelude λ> octet2senary [3,4,5]    
[1,0,2,1]
```
to get (1021)~6~.

*  Write a Haskell function that adds two base-8 numbers represented as lists. For example, to add (6273)~8~ and (7712)~8~ in `ghci`, you type
``` {padding-left:1ex; padding-right:1ex; padding-top:.75ex; padding-bottom:.25ex; background-color:black; color:white; font-size:14pt }
Prelude λ> addoctets [6,2,7,3] [7,7,1,2]    
[1,6,1,8,5]
```
You can use the following code stub to get yourself started.
``` haskell
  addoctets :: [Int] -> [Int] ->[Int]
  addoctets = undefined
``` 

addoctets [] = []
  
  addoctets xs [] = xs

# Bonus Problems 
* **[10 points]** Write a Haskell function that multiplies two base-`b` numbers.
``` haskell
  mult :: Int -> [Int] -> [Int] ->[Int]
  mult = undefined
``` 
 
* **[10 points]** Write a Haskell function that divides two base-`b` numbers.
``` haskell
  divmod :: Int -> [Int] -> [Int] ->[Int]
  divmod = undefined
``` 

[reference manual]: http://research.microsoft.com/en-us/um/people/daan/madoko/doc/reference.html  "Madoko reference manual"
